#! /usr/bin/env python
#*
#*  Copyright (c) 2010, Jack O'Quin
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the author nor the names of other
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# 1394 camera dynamic configuration

from dynamic_reconfigure.parameter_generator_catkin import *
from driver_base.msg import SensorLevels
import roslib

gen = ParameterGenerator()

#       Name, Type, Reconfiguration level, Description, Default, Min, Max

gen.add("guid", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "Global Unique ID of camera, 16 hex digits (use first camera if null).",
        "")

source =  gen.enum([gen.const("nao_top", int_t, 0, "Nao top camera"),
                  gen.const("nao_bottom", int_t, 1, "Nao bottom camera")
                  ],
                 "Video source.")

gen.add("source", int_t, SensorLevels.RECONFIGURE_CLOSE,
        "Video source.", 0, edit_method = source)


resolutions = gen.enum([gen.const("160x120", int_t, 0, ""),
                  gen.const("320x240", int_t, 1, ""),
                  gen.const("640x480", int_t, 2, ""),
                  gen.const("1280x960", int_t, 3, "")
                  ],
                 "Resolutions for camera.")

gen.add("resolution", int_t, SensorLevels.RECONFIGURE_CLOSE,
        "Camera resolution.", 1, edit_method = resolutions)

gen.add("frame_rate", double_t, SensorLevels.RECONFIGURE_CLOSE,
        "Camera speed (frames per second).", 15.0, 1., 30.0)

gen.add("camera_info_url_top", str_t, SensorLevels.RECONFIGURE_RUNNING,
        "Camera [[camera_info_manager#URL_Names|calibration URL]] for this video_mode (uncalibrated if null).",
        roslib.packages.find_resource('nao_camera', 'nao_camera_top_640x480.yaml')[0] )

gen.add("camera_info_url_bottom", str_t, SensorLevels.RECONFIGURE_RUNNING,
        "Camera [[camera_info_manager#URL_Names|calibration URL]] for this video_mode (uncalibrated if null).",
        roslib.packages.find_resource('nao_camera', 'nao_camera_bottom_640x480.yaml')[0] )

gen.add("use_ros_time", bool_t, SensorLevels.RECONFIGURE_CLOSE,
        "Timestamp Image and CameraInfo using ros::Time::now() instead of NAOqi timestamps", False)

# Camera tuning
exposure_algos = gen.enum([gen.const("average_scene_brightness", int_t, 0, "Average scene Brightness"),
                     gen.const("weighted_average_scene_brightness", int_t, 1, "Weighted average scene Brightness"),
                     gen.const("adaptive_weighted_auto_exposure_highlights", int_t, 2, "Adaptive weighted auto exposure for hightlights"),
                     gen.const("adaptive_weighted_auto_exposure_lowlights", int_t, 3, "Adaptive weighted auto exposure for lowlights"),
                     ],
                    "Auto Exposure Algorithm")

controls = gen.enum([gen.const("Off", int_t, 0, "Use fixed value"),
                     gen.const("Auto", int_t, 1, "Camera sets continuously"),
                     ],
                    "Feature control states")


gen.add("auto_exposition", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Auto exposition.", 1, 0, 1, edit_method = controls)

gen.add("auto_exposure_algo", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Auto Exposure Algorithm.", 1, 0, 3, edit_method = exposure_algos)

gen.add("exposure", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Exposure (time in ms = (value * 2) / 5) (disables auto exposition)", 128, 0, 512)

gen.add("gain", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Relative circuit gain (disables auto exposition).", 128, 0, 255)

gen.add("brightness", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brightness (enables auto exposition).", 128, 0, 255)

gen.add("contrast", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Constrast.", 64, 0, 127)

gen.add("saturation", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Color saturation.", 128, 0, 255)

gen.add("hue", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Color phase.", 0, -180, 180)

gen.add("sharpness", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Image sharpness.", 0, -7, 7)

gen.add("auto_white_balance", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "White balance control state.", 1, 0, 1, edit_method = controls)

gen.add("white_balance", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "White balance (disables auto white balance).",
        -50, -120, -36)

PACKAGE='naocamera'
exit(gen.generate(PACKAGE, "NaoCamera", "NaoCamera"))
